using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Maths;
using Robust.Client.UserInterface.CustomControls;
using Content.Shared._Eternal.Paper;
using Robust.Client.GameObjects;
using Robust.Shared.Utility;
using Robust.Client.UserInterface;
using Robust.Shared.Localization;

namespace Content.Client._Eternal.Paper;

[GenerateTypedNameReferences]
public sealed partial class ChameleonPenWindow : DefaultWindow
{
    public event Action<Color, string, SignatureType>? OnSave;

    private SignatureType _currentSignatureType = SignatureType.Normal;

    public ChameleonPenWindow()
    {
        RobustXamlLoader.Load(this);

        // Локализация
        Title = Loc.GetString("chameleon-pen-verb-forge-label");
        ColorLabel.Text = Loc.GetString("chameleon-pen-verb-forge-color");
        SignatureTextLabel.Text = Loc.GetString("chameleon-pen-verb-forge-text");
        InkTypeLabel.Text = Loc.GetString("chameleon-pen-ink-type-label");
        SaveButton.Text = Loc.GetString("chameleon-pen-verb-forge-save");
        CancelButton.Text = Loc.GetString("chameleon-pen-verb-forge-close");

        InkTypeSelector.AddItem(Loc.GetString("chameleon-pen-ink-type-visible"), 0);
        InkTypeSelector.AddItem(Loc.GetString("chameleon-pen-ink-type-invisible"), 1);
        _currentSignatureType = SignatureType.Normal;

        InkTypeSelector.OnItemSelected += args =>
        {
            InkTypeSelector.SelectId(args.Id);
            _currentSignatureType = args.Id == 1 ? SignatureType.Invisible : SignatureType.Normal;
        };

        SaveButton.OnPressed += _ =>
        {
            var color = ColorSelector.Color;
            var text = SignatureTextEdit.Text.Trim();
            var signatureType = _currentSignatureType;
            OnSave?.Invoke(color, text, signatureType);
        };
        CancelButton.OnPressed += _ => Close();
    }

    public void SetInitial(Color? color, string? text, SignatureType signatureType)
    {
        ColorSelector.Color = color ?? Color.White;
        SignatureTextEdit.Text = text ?? string.Empty;
        _currentSignatureType = signatureType;
        var idx = signatureType == SignatureType.Invisible ? 1 : 0;
        InkTypeSelector.SelectId(idx);
    }
}

public sealed class ChameleonPenBui : BoundUserInterface
{
    private ChameleonPenWindow? _window;

    public ChameleonPenBui(EntityUid owner, Enum uiKey) : base(owner, uiKey) { }

    protected override void Open()
    {
        base.Open();

        _window = this.CreateWindow<ChameleonPenWindow>();
        _window.OnSave += (color, text, signatureType) =>
        {
            SendMessage(new ChameleonPenBuiSetMessage(color, text, signatureType));
            Close();
        };
    }

    protected override void UpdateState(BoundUserInterfaceState state)
    {
        if (state is not ChameleonPenBuiState s)
            return;

        _window?.SetInitial(s.ForgedSignatureColor, s.ForgedSignatureText, s.SignatureType);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            _window?.Dispose();
        }
    }
}
