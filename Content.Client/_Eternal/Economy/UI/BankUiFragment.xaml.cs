using System.Text.RegularExpressions;
using Content.Shared._Eternal.Economy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Eternal.Economy.UI;

[GenerateTypedNameReferences]
public sealed partial class BankUiFragment : BoxContainer
{
    public Action<BankAccountLinkMessage>? OnLinkAttempt;

    private bool _accountLinkActive;

    private readonly string _lineEditPattern = "[^0-9]";

    public Action<BankChangePinMessage>? OnChangePinAttempt;


    public Action? OnRefreshRequested;
    public BankUiFragment()
    {
        RobustXamlLoader.Load(this);

        RefreshButton.OnPressed += _ =>
        {
            OnRefreshRequested?.Invoke();
        };

        AccountLinkButton.OnPressed += _ =>
        {
            _accountLinkActive = true;
            UpdateAccountLinkUi();
            ChangePinPanel.Visible = false;
            ChangePinShowButton.Visible = true;
            TransferPanel.Visible = false;
            TransferShowButton.Visible = true;
        };

        ChangePinShowButton.OnPressed += _ =>
        {
            ChangePinShowButton.Visible = false;
            ChangePinPanel.Visible = true;
            _accountLinkActive = false;
            UpdateAccountLinkUi();
            TransferPanel.Visible = false;
            TransferShowButton.Visible = true;
        };

        TransferShowButton.OnPressed += _ =>
        {
            TransferShowButton.Visible = false;
            TransferPanel.Visible = true;
            ChangePinPanel.Visible = false;
            ChangePinShowButton.Visible = true;
            _accountLinkActive = false;
            UpdateAccountLinkUi();
        };

        TransferCancelButton.OnPressed += _ =>
        {
            TransferPanel.Visible = false;
            TransferShowButton.Visible = true;
            TransferAccountLineEdit.Text = string.Empty;
            TransferAmountLineEdit.Text = string.Empty;
        };

        TransferAccountLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(TransferAccountLineEdit, 6);
            ValidateTransferFields();
        };
        TransferAmountLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(TransferAmountLineEdit, 9);
            ValidateTransferFields();
        };
        TransferCommentLineEdit.OnTextChanged += _ =>
        {
            var text = TransferCommentLineEdit.Text;
            if (text.Length > 120)
                text = text[..120];
            if (TransferCommentLineEdit.Text != text)
                TransferCommentLineEdit.Text = text;
        };

        
        TransferConfirmButton.OnPressed += _ =>
        {
            if (!TransferConfirmButton.Disabled)
            {
                if (!int.TryParse(TransferAccountLineEdit.Text, out var toAccount))
                    return;
                if (!int.TryParse(TransferAmountLineEdit.Text, out var amount))
                    return;
                if (TransferPinLineEdit.Text.Length != 4 || !int.TryParse(TransferPinLineEdit.Text, out var pin))
                    return;
                var comment = string.IsNullOrWhiteSpace(TransferCommentLineEdit.Text) ? null : TransferCommentLineEdit.Text;
                OnTransferAttempt?.Invoke(new BankTransferMessage(toAccount, amount, pin, comment));
                AccountLinkResultLabel.Visible = true;
            }
        };

        TransferPinLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(TransferPinLineEdit, 4);
            ValidateTransferFields();
        };



        void ValidateTransferFields()
        {
            var validAccount = TransferAccountLineEdit.Text.Length == 6 && int.TryParse(TransferAccountLineEdit.Text, out _);
            var validAmount = false;
            if (int.TryParse(TransferAmountLineEdit.Text, out var sum) && sum > 0)
            {
                var balance = _lastUiState?.Balance ?? 0;
                validAmount = sum <= balance;
            }
            var validPin = TransferPinLineEdit.Text.Length == 4 && int.TryParse(TransferPinLineEdit.Text, out _);
            TransferConfirmButton.Disabled = !(validAccount && validAmount && validPin);
        }


        ChangePinCancelButton.OnPressed += _ =>
        {
            ChangePinPanel.Visible = false;
            ChangePinShowButton.Visible = true;
            OldPinLineEdit.Text = string.Empty;
            NewPinLineEdit.Text = string.Empty;
            ChangePinResultLabel.Visible = false;
        };

        SavePinButton.OnPressed += _ =>
        {
            ChangePinResultLabel.Visible = false;
            if (OldPinLineEdit.Text.Length != 4 || NewPinLineEdit.Text.Length != 4)
            {
                ChangePinResultLabel.Text = Loc.GetString("bank-program-ui-change-pin-invalid");
                ChangePinResultLabel.Visible = true;
                return;
            }
            if (!int.TryParse(OldPinLineEdit.Text, out var oldPin) || !int.TryParse(NewPinLineEdit.Text, out var newPin))
            {
                ChangePinResultLabel.Text = Loc.GetString("bank-program-ui-change-pin-invalid");
                ChangePinResultLabel.Visible = true;
                return;
            }
            OnChangePinAttempt?.Invoke(new BankChangePinMessage(oldPin, newPin));
            ChangePinPanel.Visible = false;
            ChangePinShowButton.Visible = true;
            OldPinLineEdit.Text = string.Empty;
            NewPinLineEdit.Text = string.Empty;
        };

        OldPinLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(OldPinLineEdit, 4);
        };

        NewPinLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(NewPinLineEdit, 4);
        };

        LinkCancelButton.OnPressed += _ =>
        {
            _accountLinkActive = false;
            UpdateAccountLinkUi();
        };

        PinLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(PinLineEdit, 4);
        };

        AccountLineEdit.OnTextChanged += _ =>
        {
            ValidateLineEdit(AccountLineEdit, 6);
        };

        LinkConfirmButton.OnPressed += _ =>
        {
            if (PinLineEdit.Text.Length != 4 || AccountLineEdit.Text.Length != 6)
                return;

            var accountId = int.Parse((string) AccountLineEdit.Text);
            var pin = int.Parse((string) PinLineEdit.Text);
            AccountLinkResultLabel.Visible = true;
            _accountLinkActive = false;
            OnLinkAttempt?.Invoke(new BankAccountLinkMessage(accountId, pin));
        };
    }

    public Action<BankTransferMessage>? OnTransferAttempt;

    private BankCartridgeUiState? _lastUiState;
    public void UpdateState(BankCartridgeUiState state)
    {
        _lastUiState = state;
        var accountLinked = state.AccountId != null;

        AccountLinkMessageLabel.Text = state.AccountLinkMessage;
        AccountLinkResultLabel.Text = state.AccountLinkResult;
        AccountLinkResultLabel.Visible = !string.IsNullOrEmpty(state.AccountLinkResult);

        if (!string.IsNullOrEmpty(state.AccountLinkResult))
        {
            if (state.AccountLinkResult.Contains("PIN-код успешно изменен") || 
                state.AccountLinkResult.Contains("PIN successfully changed"))
            {
                OldPinLineEdit.Text = string.Empty;
                NewPinLineEdit.Text = string.Empty;
                ChangePinPanel.Visible = false;
                ChangePinShowButton.Visible = true;
                ChangePinResultLabel.Text = state.AccountLinkResult;
                ChangePinResultLabel.Visible = true;
            }
            if (state.AccountLinkResult.Contains("выполнен успешно") ||
                state.AccountLinkResult.Contains("Successfully transferred"))
            {
                TransferPanel.Visible = false;
                TransferShowButton.Visible = true;
                TransferAccountLineEdit.Text = string.Empty;
                TransferAmountLineEdit.Text = string.Empty;
                TransferPinLineEdit.Text = string.Empty;
            }
            else if (state.AccountLinkResult.Contains("PIN") || 
                     state.AccountLinkResult.Contains("Wrong old PIN") ||
                     state.AccountLinkResult.Contains("Invalid PIN"))
            {
                ChangePinResultLabel.Text = state.AccountLinkResult;
                ChangePinResultLabel.Visible = true;
            }
            else
            {
                ChangePinResultLabel.Visible = false;
            }
        }
        else
        {
            ChangePinResultLabel.Visible = false;
        }

        LinkedAccount.Visible = accountLinked;
        NoLinkedAccountLabel.Visible = !accountLinked;

        if (accountLinked)
        {
            LinkedAccountNumberLabel.Text = Loc.GetString("bank-program-ui-account-number-text",
                ("account", state.AccountId!.Value));
            LinkedAccountNameLabel.Text = Loc.GetString("bank-program-ui-account-owner-text",
                ("owner", state.OwnerName));
            LinkedAccountBalanceLabel.Text = Loc.GetString("atm-ui-balance", ("balance", state.Balance));
            UpdateAccountLinkUi();
            return;
        }

        NoLinkedAccountLabel.Text = Loc.GetString("bank-program-ui-no-account");
        UpdateAccountLinkUi();
    }


    private void UpdateAccountLinkUi()
    {
        AccountLinkButton.Visible = !_accountLinkActive;
        AccountLink.Visible = _accountLinkActive;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        LinkConfirmButton.Disabled = PinLineEdit.Text.Length != 4 || AccountLineEdit.Text.Length != 6;
        SavePinButton.Disabled = OldPinLineEdit.Text.Length != 4 || NewPinLineEdit.Text.Length != 4;
    }

    private void ValidateLineEdit(LineEdit lineEdit, int length)
    {
        var text = Regex.Replace(lineEdit.Text, _lineEditPattern, string.Empty);

        if (text.Length > length)
        {
            text = text[..length];
        }

        lineEdit.Text = text;
    }
}
