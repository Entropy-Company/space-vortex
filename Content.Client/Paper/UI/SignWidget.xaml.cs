using System.Numerics;
using Content.Shared.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface.RichText;
using Content.Client.Resources;

namespace Content.Client.Paper.UI;

public struct SignDisplayInfo
{
    public string StampedName;
    public Color StampedColor;
}

[GenerateTypedNameReferences]
public sealed partial class SignWidget : PanelContainer
{
    private ShaderInstance? _signShader;
    private Font? _font;
    private int _fontSize = 26;
    private string _fontPrototypeId = "Sign";

    public float Orientation
    {
        get => StampedByLabel.Orientation;
        set => StampedByLabel.Orientation = value;
    }

    public string FontPrototypeId
    {
        get => _fontPrototypeId;
        set
        {
            _fontPrototypeId = value;
            UpdateFont();
        }
    }

    public int FontSize
    {
        get => _fontSize;
        set
        {
            _fontSize = value;
            UpdateFont();
        }
    }

    public SignDisplayInfo SignInfo {
        set {
            StampedByLabel.Text = Loc.GetString(value.StampedName);
            StampedByLabel.FontColorOverride = value.StampedColor;
            ModulateSelfOverride = value.StampedColor;
            UpdateFont();
        }
    }

    public SignWidget()
    {
        RobustXamlLoader.Load(this);
        var prototypes = IoCManager.Resolve<IPrototypeManager>();
        _signShader = prototypes.Index<ShaderPrototype>("PaperStamp").InstanceUnique();
        UpdateFont();
    }

    private void UpdateFont()
    {
        var resCache = IoCManager.Resolve<IResourceCache>();
        var protoMan = IoCManager.Resolve<IPrototypeManager>();
        if (protoMan.TryIndex<FontPrototype>(_fontPrototypeId, out var fontProto))
        {
            _font = resCache.GetFont(fontProto.Path, _fontSize);
            StampedByLabel.FontOverride = _font;
        }
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        _signShader?.SetParameter("objCoord", GlobalPosition * UIScale * new Vector2(1, -1));
        handle.UseShader(_signShader);
        handle.SetTransform(GlobalPosition * UIScale, Orientation, Vector2.One);
        base.Draw(handle);

        // Restore a sane transform+shader
        handle.SetTransform(Matrix3x2.Identity);
        handle.UseShader(null);
    }
}
