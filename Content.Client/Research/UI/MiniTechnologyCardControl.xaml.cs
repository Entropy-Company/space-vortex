using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Robust.Client.Graphics;
using System;
using Robust.Shared.Input;

namespace Content.Client.Research.UI;

public enum ResearchAvailablity
{
    Researched,
    Available,
    Unavailable
}

[GenerateTypedNameReferences]
public sealed partial class MiniTechnologyCardControl : Control
{
    public readonly TechnologyPrototype Technology;

    public event Action? OnTileClicked;

    private ResearchAvailablity _currentAvailability;
    private bool _isHovered;

    public MiniTechnologyCardControl(TechnologyPrototype technology, IPrototypeManager prototypeManager, SpriteSystem spriteSys, FormattedMessage description)
    {
        RobustXamlLoader.Load(this);
        Texture.Texture = spriteSys.Frame0(technology.Icon);

        Technology = technology;
        TileButton.OnPressed += _ => OnTileClicked?.Invoke();
        TileButton.OnMouseEntered += _ =>
        {
            _isHovered = true;
            UpdateTileStyle();
        };
        TileButton.OnMouseExited += _ =>
        {
            _isHovered = false;
            UpdateTileStyle();
        };
    }

    public void SetAvailability(ResearchAvailablity availablity)
    {
        _currentAvailability = availablity;
        UpdateTileStyle();
    }

    private void UpdateTileStyle()
    {
        var style = (StyleBoxFlat)TilePanel.PanelOverride!;
        Color bg, highlight, border;
        switch (_currentAvailability)
        {
            case ResearchAvailablity.Researched:
                bg = Color.DarkOliveGreen;
                highlight = Color.PaleGreen;
                border = Color.LimeGreen;
                break;
            case ResearchAvailablity.Available:
                bg = Color.FromHex("#6b572f");
                highlight = Color.FromHex("#fad398");
                border = Color.FromHex("#cca031");
                break;
            case ResearchAvailablity.Unavailable:
                bg = Color.DarkRed;
                highlight = Color.FromHex("#a94442");
                border = Color.Crimson;
                break;
            default:
                bg = Color.Gray;
                highlight = Color.Gray;
                border = Color.Gray;
                break;
        }
        if (_isHovered)
        {
            style.BackgroundColor = highlight;
        }
        else
        {
            style.BackgroundColor = bg;
        }
        style.BorderColor = border;
    }

    private Color AlphaBlend(Color baseColor, Color overlay)
    {
        float a = overlay.A;
        return new Color(
            baseColor.R * (1 - a) + overlay.R * a,
            baseColor.G * (1 - a) + overlay.G * a,
            baseColor.B * (1 - a) + overlay.B * a,
            baseColor.A
        );
    }
}
