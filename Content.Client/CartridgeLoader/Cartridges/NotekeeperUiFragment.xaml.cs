// SPDX-FileCopyrightText: 2022 Julian Giebel <juliangiebel@live.de>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: MIT

using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Maths;
using Robust.Shared.Utility;
using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.UserInterface.CustomControls;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class NotekeeperUiFragment : BoxContainer
{
    public event Action<int>? OnNoteSelected;
    public event Action? OnBackButtonPressed;
    public event Action? OnCreateNewNote;
    public event Action<int, string, string>? OnSaveNote;
    public event Action<int>? OnDeleteNote;
    public event Action<int>? OnViewNote;

    private int? _currentEditingNoteId = null;
    private int? _currentViewingNoteId = null;

    public NotekeeperUiFragment()
    {
        RobustXamlLoader.Load(this);
        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        BackButton.OnPressed += _ => OnBackButtonPressed?.Invoke();
        SaveButton.OnPressed += _ => SaveCurrentNote();
        DeleteButton.OnPressed += _ => { if (_currentEditingNoteId.HasValue) OnDeleteNote?.Invoke(_currentEditingNoteId.Value); };
        EditButton.OnPressed += _ =>
        {
            if (_currentViewingNoteId.HasValue)
                OnNoteSelected?.Invoke(_currentViewingNoteId.Value);
        };
        NewNoteButton.OnPressed += _ => OnCreateNewNote?.Invoke();
    }

    public void UpdateListState(List<NoteData> notes)
    {
        NotesListView.Visible = true;
        NoteEditorView.Visible = false;
        NoteViewView.Visible = false;
        BackButton.Disabled = true;

        NotesListContainer.RemoveAllChildren();

        // Add existing notes
        foreach (var note in notes)
        {
            var noteButton = new Button
            {
                Text = string.IsNullOrEmpty(note.Title) ? Loc.GetString("notekeeper-ui-untitled-note") : note.Title,
                HorizontalExpand = true,
                Margin = new Thickness(2, 2, 2, 2)
            };
            noteButton.OnPressed += _ => OnViewNote?.Invoke(note.Id);
            NotesListContainer.AddChild(noteButton);
        }
    }

    public void UpdateViewState(NoteData note)
    {
        NotesListView.Visible = false;
        NoteEditorView.Visible = false;
        NoteViewView.Visible = true;
        BackButton.Disabled = false;

        _currentViewingNoteId = note.Id;
        NoteViewTitleLabel.Text = note.Title;
        NoteViewContentLabel.SetMessage(FormattedMessage.FromMarkupPermissive(note.Content));
    }

    public void UpdateEditorState(NoteData note)
    {
        NotesListView.Visible = false;
        NoteEditorView.Visible = true;
        NoteViewView.Visible = false;
        BackButton.Disabled = false;

        _currentEditingNoteId = note.Id;
        TitleInput.Text = note.Title;
        ContentInput.TextRope = new Rope.Leaf(note.Content);
    }

    private void SaveCurrentNote()
    {
        if (_currentEditingNoteId.HasValue)
        {
            var title = TitleInput.Text.Trim();
            var content = Rope.Collapse(ContentInput.TextRope);
            OnSaveNote?.Invoke(_currentEditingNoteId.Value, title, content);
        }
    }
}