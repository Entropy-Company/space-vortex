using Content.Client.Message;
using Content.Shared.MassMedia.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Maths;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class NewsReaderUiFragment : BoxContainer
{
    public event Action? OnNextButtonPressed;
    public event Action? OnPrevButtonPressed;
    public event Action? OnNotificationSwithPressed;
    public event Action<int>? OnArticleSelected;
    public event Action? OnBackButtonPressed;

    public NewsReaderUiFragment()
    {
        RobustXamlLoader.Load(this);

        Next.OnPressed += _ => OnNextButtonPressed?.Invoke();
        Prev.OnPressed += _ => OnPrevButtonPressed?.Invoke();
        NotificationSwitch.OnPressed += _ => OnNotificationSwithPressed?.Invoke();
        BackButton.OnPressed += _ => OnBackButtonPressed?.Invoke();
    }

    public void UpdateListState(NewsArticle[] articles, bool notificationOn)
    {
        ArticleListView.Visible = true;
        ArticleView.Visible = false;

        ArticleListContainer.Children.Clear();

        if (articles.Length == 0)
        {
            var noArticlesLabel = new Label
            {
                Text = Loc.GetString("news-read-ui-not-found-text"),
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center
            };
            ArticleListContainer.AddChild(noArticlesLabel);
        }
        else
        {
            // Show articles in reverse order (newest first)
            for (var i = articles.Length - 1; i >= 0; i--)
            {
                var article = articles[i];
                var articleCard = CreateArticleCard(article, i);
                ArticleListContainer.AddChild(articleCard);
            }
        }

        NotificationSwitch.Text = Loc.GetString(notificationOn ? "news-read-ui-notification-on" : "news-read-ui-notification-off");
        BackButton.Disabled = true; // Back button is disabled when viewing list
    }

    public void UpdateArticleState(NewsArticle article, int targetNum, int totalNum, bool notificationOn)
    {
        ArticleListView.Visible = false;
        ArticleView.Visible = true;

        PageNum.Visible = true;
        PageText.Visible = true;
        ShareTime.Visible = true;
        Author.Visible = true;

        PageName.Text = article.Title;
        PageText.SetMarkupPermissive(article.Content);

        PageNum.Text = $"{targetNum}/{totalNum}";

        NotificationSwitch.Text = Loc.GetString(notificationOn ? "news-read-ui-notification-on" : "news-read-ui-notification-off");

        string shareTime = article.ShareTime.ToString(@"hh\:mm\:ss");
        ShareTime.SetMarkup(Loc.GetString("news-read-ui-time-prefix-text") + " " + shareTime);

        Author.SetMarkup(Loc.GetString("news-read-ui-author-prefix") + " " + (article.Author != null ? article.Author : Loc.GetString("news-read-ui-no-author")));

        Prev.Disabled = targetNum <= 1;
        Next.Disabled = targetNum >= totalNum;
        BackButton.Disabled = false; // Back button is enabled when viewing article
    }

    public void UpdateEmptyState(bool notificationOn)
    {
        ArticleListView.Visible = true;
        ArticleView.Visible = false;

        ArticleListContainer.Children.Clear();
        var noArticlesLabel = new Label
        {
            Text = Loc.GetString("news-read-ui-not-found-text"),
            HorizontalAlignment = HAlignment.Center,
            VerticalAlignment = VAlignment.Center
        };
        ArticleListContainer.AddChild(noArticlesLabel);

        NotificationSwitch.Text = Loc.GetString(notificationOn ? "news-read-ui-notification-on" : "news-read-ui-notification-off");
        BackButton.Disabled = true; // Back button is disabled when no articles
    }

    private Control CreateArticleCard(NewsArticle article, int index)
    {
        var card = new PanelContainer
        {
            StyleClasses = { "BackgroundDark" },
            Margin = new Thickness(2, 2, 2, 2)
        };

        var container = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(8, 8, 8, 8)
        };

        // Create a single button with all article information
        var articleButton = new Button
        {
            HorizontalExpand = true,
            Margin = new Thickness(0, 0, 0, 0)
        };

        // Create a container for the button content
        var buttonContent = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true
        };

        var titleLabel = new Label
        {
            Text = article.Title,
            StyleClasses = { "LabelBig" },
            Margin = new Thickness(0, 0, 0, 4),
            HorizontalExpand = true
        };

        var metaContainer = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true
        };

        var authorLabel = new Label
        {
            Text = article.Author ?? Loc.GetString("news-read-ui-no-author"),
            StyleClasses = { "LabelSmall" },
            HorizontalExpand = true
        };

        var timeLabel = new Label
        {
            Text = article.ShareTime.ToString(@"hh\:mm\:ss"),
            StyleClasses = { "LabelSmall" }
        };

        metaContainer.AddChild(authorLabel);
        metaContainer.AddChild(timeLabel);

        buttonContent.AddChild(titleLabel);
        buttonContent.AddChild(metaContainer);

        articleButton.AddChild(buttonContent);
        articleButton.OnPressed += _ => OnArticleSelected?.Invoke(index);

        container.AddChild(articleButton);
        card.AddChild(container);
        return card;
    }
}
