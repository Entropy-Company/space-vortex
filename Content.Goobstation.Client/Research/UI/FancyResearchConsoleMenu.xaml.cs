// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <aiden@djkraz.com>
// SPDX-FileCopyrightText: 2025 FaDeOkno <143940725+FaDeOkno@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 FaDeOkno <logkedr18@gmail.com>
// SPDX-FileCopyrightText: 2025 GoobBot <uristmchands@proton.me>
// SPDX-FileCopyrightText: 2025 SX-7 <92227810+SX-7@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 coderabbitai[bot] <136622811+coderabbitai[bot]@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 gluesniffler <159397573+gluesniffler@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System;
using System.Linq;
using System.Numerics;
using Content.Client.Research;
using Content.Client.UserInterface.Controls;
using Content.Goobstation.Common.Research;
using Content.Goobstation.Shared.Research;
using Content.Shared.Access.Systems;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Goobstation.Client.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class FancyResearchConsoleMenu : FancyWindow
{
    public Action<string>? OnTechnologyCardPressed;
    public Action? OnServerButtonPressed;

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly ResearchSystem _research;
    private readonly SpriteSystem _sprite;
    private readonly AccessReaderSystem _accessReader;

    /// <summary>
    /// Console entity
    /// </summary>
    public EntityUid Entity;

    /// <summary>
    /// Currently selected tech
    /// Exsists for better UI refreshing
    /// </summary>
    public ProtoId<TechnologyPrototype>? CurrentTech;

    /// <summary>
    /// All technologies and their availablity
    /// </summary>
    public Dictionary<string, ResearchAvailability> List = new();

    /// <summary>
    /// Cached research points
    /// </summary>
    public int Points = 0;

    /// <summary>
    /// Is tech currently being dragged
    /// </summary>
    private bool _draggin;

    /// <summary>
    /// Global position that all tech relates to.
    /// For dragging mostly
    /// </summary>
    private Vector2 _position = new Vector2(45, 250);
    private float _zoom = 1f;
    private const float MinZoom = 0.5f;
    private const float MaxZoom = 2f;
    private const float ZoomSpeed = 0.125f;
    
    private string? _selectedDiscipline;
    private readonly Dictionary<string, (Button Tab, Control ProgressControl)> _disciplineControls = new();
    private readonly Dictionary<string, List<TechnologyPrototype>> _technologiesByDiscipline = new();
    private readonly List<FancyResearchConsoleItem> _techItems = new();

    private string? _lastSelectedTechId;
    private DateTime _lastSelectTime;

    // UI Elements (resolved at runtime to avoid dependency on source generator)
    private readonly Control _staticSprite;
    private readonly Button _serverButton;
    private readonly Control _dragContainer;
    private readonly Button _recenterButton;
    private readonly RichTextLabel _researchAmountLabel;
    private readonly BoxContainer _disciplineTabsContainer;
    private readonly BoxContainer _disciplineProgressContainer;
    private readonly BoxContainer _infoContainer;

    public FancyResearchConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _research = _entity.System<ResearchSystem>();
        _sprite = _entity.System<SpriteSystem>();
        _accessReader = _entity.System<AccessReaderSystem>();

        // Resolve UI elements by Name
        _staticSprite = this.FindControl<Control>("StaticSprite");
        _serverButton = this.FindControl<Button>("ServerButton");
        _dragContainer = this.FindControl<Control>("DragContainer");
        _recenterButton = this.FindControl<Button>("RecenterButton");
        _researchAmountLabel = this.FindControl<RichTextLabel>("ResearchAmountLabel");
        _disciplineTabsContainer = this.FindControl<BoxContainer>("DisciplineTabsContainer");
        _disciplineProgressContainer = this.FindControl<BoxContainer>("DisciplineProgressContainer");
        _infoContainer = this.FindControl<BoxContainer>("InfoContainer");

        // Setup static sprite
        if (_staticSprite is AnimatedTextureRect animatedTextureRect)
        {
            animatedTextureRect.SetFromSpriteSpecifier(new SpriteSpecifier.Rsi(new("_Goobstation/Interface/rnd-static.rsi"), "static"));
            if (animatedTextureRect.DisplayRect is TextureRect textureRect)
            {
                textureRect.CanShrink = true;
                textureRect.Stretch = TextureRect.StretchMode.Scale;
            }
        }

        _serverButton.OnPressed += _ => OnServerButtonPressed?.Invoke();
        _dragContainer.OnKeyBindDown += OnKeybindDown;
        _dragContainer.OnKeyBindUp += OnKeybindUp;
        _recenterButton.OnPressed += _ => Recenter();

        UpdatePanels(List);
        Recenter();
    }

    public void SetEntity(EntityUid entity)
        => Entity = entity;

    public void UpdatePanels(Dictionary<string, ResearchAvailability> list)
    {
        List = list;
        
        // Group technologies by discipline
        _technologiesByDiscipline.Clear();
        foreach (var techProto in _prototype.EnumeratePrototypes<TechnologyPrototype>())
        {
            if (!_technologiesByDiscipline.ContainsKey(techProto.Discipline))
            {
                _technologiesByDiscipline[techProto.Discipline] = new List<TechnologyPrototype>();
            }
            _technologiesByDiscipline[techProto.Discipline].Add(techProto);
        }
        
        UpdateInformationPanel(Points);
        UpdateDisciplineTabs();
        
        // Update visible technologies based on selected discipline
        if (_selectedDiscipline != null)
        {
            UpdateActiveTab(_selectedDiscipline);
        }
    }

    public void UpdateInformationPanel(int points)
    {
        Points = points;
        _researchAmountLabel.SetMessage(Loc.GetString("research-console-menu-research-points-text", ("points", Points)));
        
        // Update progress for all disciplines
        if (_entity.TryGetComponent<TechnologyDatabaseComponent>(Entity, out var database))
        {
            foreach (var (disciplineId, (_, progressControl)) in _disciplineControls)
            {
                var discipline = _prototype.Index<TechDisciplinePrototype>(disciplineId);
                var percentage = _research.GetTierCompletionPercentage(database, discipline, _prototype);
                UpdateDisciplineProgress(disciplineId, percentage);
            }
        }
    }
    
    private void UpdateDisciplineTabs()
    {
        if (!_entity.TryGetComponent<TechnologyDatabaseComponent>(Entity, out var database))
            return;
            
        // Clear existing tabs and progress controls
        _disciplineTabsContainer.RemoveAllChildren();
        _disciplineProgressContainer.RemoveAllChildren();
        _disciplineControls.Clear();
        
        // Create a tab and progress control for each discipline
        foreach (var disciplineId in database.SupportedDisciplines)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(disciplineId);
            var percentage = _research.GetTierCompletionPercentage(database, discipline, _prototype);
            
            // Create tab button
            var tabButton = new Button
            {
                Text = Loc.GetString(discipline.Name),
                ToggleMode = true,
                MinWidth = 0,
                MinHeight = 40,
                HorizontalExpand = true,
                SizeFlagsStretchRatio = 1,
                Margin = new Thickness(2)
            };
            
            // Create progress control (ICON: PERCENT), left-aligned
            var percentLabel = new Label
            {
                Text = $"{percentage:0}%",
                HorizontalAlignment = HAlignment.Left,
                StyleClasses = { "LabelBigBold" }
            };
            var progressBox = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                VerticalExpand = false,
                Margin = new Thickness(3, 5),
                Children =
                {
                    new TextureRect
                    {
                        Texture = _sprite.Frame0(discipline.Icon),
                        TextureScale = new Vector2(2, 2),
                        HorizontalAlignment = HAlignment.Left,
                        VerticalAlignment = VAlignment.Center,
                        Margin = new Thickness(0, 0, 2, 0)
                    },
                    new Label
                    {
                        Text = ":",
                        HorizontalAlignment = HAlignment.Left,
                        VerticalAlignment = VAlignment.Center,
                        Margin = new Thickness(0, 0, 2, 0)
                    },
                    percentLabel
                }
            };
            
            // Store controls
            _disciplineControls[disciplineId] = (tabButton, progressBox);
            
            // Add to UI
            _disciplineTabsContainer.AddChild(tabButton);
            _disciplineProgressContainer.AddChild(progressBox);
            
            // Set up tab selection
            tabButton.OnToggled += args =>
            {
                if (args.Pressed)
                {
                    _selectedDiscipline = disciplineId;
                    UpdateActiveTab(disciplineId);
                }
            };
            
            // Select first discipline by default
            if (_selectedDiscipline == null)
            {
                tabButton.Pressed = true;
                _selectedDiscipline = disciplineId;
            }
        }
    }
    
    private void UpdateDisciplineProgress(string disciplineId, float percentage)
    {
        if (_disciplineControls.TryGetValue(disciplineId, out var controls))
        {
            var childIndex = Math.Max(0, controls.ProgressControl.ChildCount - 1);
            if (controls.ProgressControl.GetChild(childIndex) is Label percentageLabel)
            {
                percentageLabel.Text = $"{percentage:0}%";
            }
        }
    }
    
    private void UpdateActiveTab(string selectedDisciplineId)
    {
        // Update tab styles
        foreach (var (disciplineId, (tab, _)) in _disciplineControls)
        {
            var isActive = disciplineId == selectedDisciplineId;
            tab.Pressed = isActive;
            tab.StyleClasses.Remove("tab-active");
            if (isActive)
            {
                tab.StyleClasses.Add("tab-active");
            }
        }
        
        // Clear existing tech items
        foreach (var item in _techItems)
        {
            _dragContainer.RemoveChild(item);
        }
        _techItems.Clear();
        
        // Add technologies for selected discipline
        if (_technologiesByDiscipline.TryGetValue(selectedDisciplineId, out var technologies))
        {
            foreach (var techProto in technologies)
            {
                if (!List.TryGetValue(techProto.ID, out var availability))
                    continue;

                var techItem = new FancyResearchConsoleItem(techProto, _sprite, availability);
                techItem.SelectAction += (p, a) => SelectTech(p, a);
                
                // Position the technology in the research tree
                var pos = techProto.Position * 150 * _zoom;
                LayoutContainer.SetPosition(techItem, _position + pos);
                techItem.SetScale(_zoom);
                
                _dragContainer.AddChild(techItem);
                _techItems.Add(techItem);
            }
        }
        
        // Don't auto-recenter to preserve user's scroll/zoom position
    }

    

    #region Drag handle
    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        base.MouseMove(args);

        if (!_draggin)
            return;

        _position += args.Relative;

        // Move all tech
        foreach (var child in _dragContainer.Children)
        {
            LayoutContainer.SetPosition(child, child.Position + args.Relative);
        }
    }

    protected override void MouseWheel(GUIMouseWheelEventArgs args)
    {
        base.MouseWheel(args);

        var oldZoom = _zoom;

        if (args.Delta.Y > 0)
            _zoom += ZoomSpeed;
        else
            _zoom -= ZoomSpeed;

        _zoom = Math.Clamp(_zoom, MinZoom, MaxZoom);

        if (MathHelper.CloseTo(oldZoom, _zoom))
            return;

        foreach (var child in _dragContainer.Children)
        {
            if (child is not FancyResearchConsoleItem research)
                continue;

            var pos = research.Prototype.Position * 150;
            LayoutContainer.SetPosition(child, _position + pos * _zoom);
            research.SetScale(_zoom);
        }
        args.Handle();
    }

    /// <summary>
    /// Raised when LMB is pressed at <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindDown(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = true;
    }

    /// <summary>
    /// Raised when LMB is unpressed at <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindUp(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = false;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
        => _draggin ? DragMode.None : base.GetDragModeFor(relativeMousePos);
    #endregion

    /// <summary>
    /// Selects a tech prototype and opens info panel
    /// </summary>
    /// <param name="proto">Tech proto</param>
    /// <param name="availability">Tech availablity</param>
    public void SelectTech(TechnologyPrototype proto, ResearchAvailability availability)
    {
        var now = DateTime.UtcNow;
        var isSame = _lastSelectedTechId == proto.ID;
        var withinWindow = (now - _lastSelectTime) <= TimeSpan.FromSeconds(0.5);

        if (isSame && withinWindow)
        {
            if (_player.LocalEntity.HasValue &&
                availability == ResearchAvailability.Available &&
                _accessReader.IsAllowed(_player.LocalEntity.Value, Entity))
            {
                OnTechnologyCardPressed?.Invoke(proto.ID);
            }

            _lastSelectTime = DateTime.MinValue;
            return;
        }

        _lastSelectedTechId = proto.ID;
        _lastSelectTime = now;

        _infoContainer.RemoveAllChildren();
        if (!_player.LocalEntity.HasValue)
            return;

        CurrentTech = proto.ID;
        var control = new FancyTechnologyInfoPanel(proto, _accessReader.IsAllowed(_player.LocalEntity.Value, Entity), availability, _sprite);
        control.BuyAction += args => OnTechnologyCardPressed?.Invoke(args.ID);
        _infoContainer.AddChild(control);
    }

    /// <summary>
    /// Sets <see cref="_position"/> to its default value
    /// </summary>
    public void Recenter()
    {
        _position = new(45, 250);
        foreach (var item in _dragContainer.Children)
        {
            if (item is not FancyResearchConsoleItem research)
                continue;

            LayoutContainer.SetPosition(item, _position + research.Prototype.Position * 150 * _zoom);
        }
    }

    public override void Close()
    {
        base.Close();

        foreach (var item in _techItems)
        {
            _dragContainer.RemoveChild(item);
        }
        _techItems.Clear();
        _infoContainer.RemoveAllChildren();
    }

    private sealed partial class DisciplineButton(TechDisciplinePrototype proto) : Button
    {
        public TechDisciplinePrototype Proto = proto;
    }
}
